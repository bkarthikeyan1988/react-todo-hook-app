{"version":3,"sources":["Components/Todos.js","Components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","markComplete","ListGroup","className","map","todo","ListGroupItem","key","id","todoItem","onClick","TodoForm","addTodos","useState","setTodoItem","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","type","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","App","setTodos","useEffect","localTodos","localStorage","getItem","JSON","parse","a","setItem","stringify","Container","fluid","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAsBeA,EAlBD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aACnB,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,mBAChBH,EAAMI,KAAI,SAAAC,GAAI,OACX,kBAACC,EAAA,EAAD,CAAeC,IAAKF,EAAKG,IACpBH,EAAKI,SACN,0BACIN,UAAU,YACVO,QAAS,kBAAMT,EAAaI,EAAKG,MAEjC,kBAAC,IAAD,a,wDCyCTG,EA5CE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACCC,mBAAS,IADV,mBACxBJ,EADwB,KACdK,EADc,KAmB/B,OACI,kBAACC,EAAA,EAAD,CAAMC,SAjBS,SAAAC,GAEf,GADAA,EAAEC,iBACe,KAAbT,EACA,OAAOU,MAAM,uBAGjB,IAAMd,EAAO,CACTI,WACAD,GAAIY,eAGRR,EAASP,GAETS,EAAY,MAKR,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,OACLC,KAAK,OACLjB,GAAG,OACHkB,YAAY,YACZC,MAAOlB,EACPmB,SAAU,SAAAX,GAAC,OAAIH,EAAYG,EAAEY,OAAOF,UAExC,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WACvB,kBAACC,EAAA,EAAD,CACIC,MAAM,WADV,iBCDTC,EAjCH,WAAO,IAAD,EACUrB,mBAAS,IADnB,mBACTb,EADS,KACFmC,EADE,KAEhBC,qBAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,SACrCF,GACDF,EAASK,KAAKC,MAAMJ,MAErB,IAEH,IAAMzB,EAAQ,uCAAG,WAAMP,GAAN,SAAAqC,EAAA,sDACfP,EAAS,GAAD,mBAAKnC,GAAL,CAAYK,KADL,2CAAH,sDAId+B,qBAAU,WACRE,aAAaK,QAAQ,QAASH,KAAKI,UAAU5C,MAC5C,CAACA,IAMJ,OACE,yBAAKG,UAAU,aACb,kBAAC0C,EAAA,EAAD,CAAWC,OAAK,EAAC3C,UAAU,iBACzB,iEACA,wBAAIA,UAAU,SAAQ,kBAAC,IAAD,MAAc,4CACpC,kBAAC,EAAD,CAAOH,MAAOA,EAAOC,aATN,SAAAO,GACnB2B,EAASnC,EAAM+C,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,KAAOA,SAStC,kBAAC,EAAD,CAAUI,SAAUA,OCxBRoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c7665a4.chunk.js","sourcesContent":["import React from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport { FcApproval } from 'react-icons/fc';\n\nconst Todos = ({todos, markComplete}) => {\n    return(\n        <ListGroup className=\"mt-3 mb-2 items\">\n            {todos.map(todo => (\n                <ListGroupItem key={todo.id}>\n                    {todo.todoItem}\n                    <span\n                        className=\"checkIcon\"\n                        onClick={() => markComplete(todo.id)}\n                    >\n                        <FcApproval />\n                    </span>\n                </ListGroupItem>\n            ))}\n        </ListGroup>\n    );\n};\n\nexport default Todos;\n","import React, { useState } from 'react';\nimport {\n    Form,\n    FormGroup,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon\n} from 'reactstrap';\nimport { v4 } from 'uuid';\n\nconst TodoForm = ({ addTodos }) => {\n    const [todoItem, setTodoItem] = useState(\"\");\n\n    const todoSubmit = e => {\n        e.preventDefault();\n        if (todoItem === \"\") {\n            return alert('Please enter a todo');\n        };\n\n        const todo = {\n            todoItem,\n            id: v4(),\n        };\n\n        addTodos(todo);\n\n        setTodoItem(\"\");\n    };\n\n    return(\n        <Form onSubmit={todoSubmit}>\n            <FormGroup>\n                <InputGroup>\n                    <Input\n                        type=\"text\"\n                        name=\"todo\"\n                        id=\"todo\"\n                        placeholder=\"Next todo\"\n                        value={todoItem}\n                        onChange={e => setTodoItem(e.target.value)}\n                    />\n                    <InputGroupAddon addonType=\"prepend\">\n                        <Button\n                            color=\"success\"\n                        >\n                            Add Todo\n                        </Button>\n                    </InputGroupAddon>\n                </InputGroup>\n            </FormGroup>\n        </Form>\n    );\n};\n\nexport default TodoForm;\n","import React,{ useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { FcTodoList } from 'react-icons/fc';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Todos from './Components/Todos';\nimport TodoForm from './Components/TodoForm';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const localTodos = localStorage.getItem(\"todos\");\n    if(localTodos) {\n      setTodos(JSON.parse(localTodos));\n    }\n  }, []);\n\n  const addTodos = async todo => {\n    setTodos([...todos, todo])\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const markComplete = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return(\n    <div className=\"todoBlock\">\n      <Container fluid className=\"todoContainer\">\n        <h6>React TODO App with local storage</h6>\n        <h2 className=\"title\"><FcTodoList /><span>TODO List</span></h2>\n        <Todos todos={todos} markComplete={markComplete} />\n        <TodoForm addTodos={addTodos} />\n      </Container>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}